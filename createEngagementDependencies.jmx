<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Publish Events to EMP" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">PROTOCOL</stringProp>
            <stringProp name="Argument.value">${__P(protocol,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">${__P(host,dbl23.soma.salesforce.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">${__P(port,443)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOGINPATH" elementType="Argument">
            <stringProp name="Argument.name">LOGINPATH</stringProp>
            <stringProp name="Argument.value">${__P(path,/services/Soap/c)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RESTPATH" elementType="Argument">
            <stringProp name="Argument.name">RESTPATH</stringProp>
            <stringProp name="Argument.value">${__P(path,/services/data)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ENTITYPATH" elementType="Argument">
            <stringProp name="Argument.name">ENTITYPATH</stringProp>
            <stringProp name="Argument.value">${__P(entitypath,sobjects/alert__e)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APITYPE" elementType="Argument">
            <stringProp name="Argument.name">APITYPE</stringProp>
            <stringProp name="Argument.value">${__P(apitype,composite)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APIVERSION" elementType="Argument">
            <stringProp name="Argument.name">APIVERSION</stringProp>
            <stringProp name="Argument.value">${__P(apiversion,47.0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(password,test1234)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THREADS" elementType="Argument">
            <stringProp name="Argument.name">THREADS</stringProp>
            <stringProp name="Argument.value">${__P(threads,110)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMP_UP_TIME_IN_S" elementType="Argument">
            <stringProp name="Argument.name">RAMP_UP_TIME_IN_S</stringProp>
            <stringProp name="Argument.value">${__P(jmeter_ramp_up_time_in_s,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THROUGHPUT_PER_MIN" elementType="Argument">
            <stringProp name="Argument.name">THROUGHPUT_PER_MIN</stringProp>
            <stringProp name="Argument.value">${__P(throughput_per_min,10000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TIME" elementType="Argument">
            <stringProp name="Argument.name">TIME</stringProp>
            <stringProp name="Argument.value">${__time(,curTime)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ORGANDUSERINFO" elementType="Argument">
            <stringProp name="Argument.name">ORGANDUSERINFO</stringProp>
            <stringProp name="Argument.value">${__P(input_file,/Users/j.guo/Perf-scripts-to-enable-HVS/datasetup/Mutations/input/fixedstreamerorgs.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loginPath" elementType="Argument">
            <stringProp name="Argument.name">loginPath</stringProp>
            <stringProp name="Argument.value">${__P(loginPath,/services/Soap/c/47.0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="crudPath" elementType="Argument">
            <stringProp name="Argument.name">crudPath</stringProp>
            <stringProp name="Argument.value">${__P(crudPath,/services/data/v47.0/)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="saveFieldsPath" elementType="Argument">
            <stringProp name="Argument.name">saveFieldsPath</stringProp>
            <stringProp name="Argument.value">/Users/j.guo/Perf-scripts-to-enable-HVS/datasetup/Mutations/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="saveFileName" elementType="Argument">
            <stringProp name="Argument.name">saveFileName</stringProp>
            <stringProp name="Argument.value">${__P(save_file,multiorg.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMP_UP_TIME_IN_S}</stringProp>
        <longProp name="ThreadGroup.start_time">1490329943000</longProp>
        <longProp name="ThreadGroup.end_time">1490329943000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Org input file " enabled="true">
          <stringProp name="filename">${ORGANDUSERINFO}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">ORGID,USERNAME,USERID</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
        </CSVDataSet>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login using SOAP" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &#xd;
   &lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; &#xd;
                  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#xd;
                  xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt; &#xd;
      &lt;soap:Body&gt; &#xd;
         &lt;login xmlns=&quot;urn:enterprise.soap.sforce.com&quot;&gt; &#xd;
            &lt;username&gt;${USERNAME}&lt;/username&gt; &#xd;
            &lt;password&gt;${PASSWORD}&lt;/password&gt; &#xd;
         &lt;/login&gt; &#xd;
      &lt;/soap:Body&gt; &#xd;
   &lt;/soap:Envelope&gt; </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port">${PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${LOGINPATH}/${APIVERSION}/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-type</stringProp>
                    <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">login</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                <stringProp name="XPathExtractor.default">NOSESSIONFOUND</stringProp>
                <stringProp name="XPathExtractor.refname">SESSIONID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">/Envelope/Body/loginResponse/result/sessionId</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <stringProp name="Scope.variable">SESSIONID</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-845505811">NOSESSIONFOUND</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SESSIONID</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Publish Events" enabled="true"/>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Login Successful Then Publish" enabled="true">
              <stringProp name="IfController.condition">&quot;${SESSIONID}&quot; != &quot;NOSESSIONFOUND&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Account" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Generate Account" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;BillingCity&quot;: &quot;mutations&quot;,&#xd;
	&quot;BillingCountry&quot;: &quot;UnitedStates&quot;,&#xd;
	&quot;BillingPostalCode&quot;: &quot;12345&quot;,&#xd;
	&quot;BillingState&quot;: &quot;Tlzl&quot;,&#xd;
	&quot;BillingStreet&quot;: &quot;dapJ&quot;,&#xd;
	&quot;Name&quot;: &quot;SFX_Person_mutations_acc&quot;,&#xd;
	&quot;Phone&quot;: &quot;5451614441&quot;,&#xd;
	&quot;ShippingCity&quot;: &quot;Boulder&quot;,&#xd;
	&quot;ShippingCountry&quot;: &quot;UnitedStates&quot;,&#xd;
	&quot;Type&quot;: &quot;Prospect&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/Account/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">account_id</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Lead" enabled="true">
                <stringProp name="TestPlan.comments">Need to select only one input file</stringProp>
              </GenericController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Generate Lead 20" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;Company&quot;: &quot;mutateasff asdfafadf&quot;,&#xd;
	&quot;LastName&quot;: &quot;Blah&quot;,&#xd;
	&quot;City&quot;: &quot;PLYMOUTH&quot;,&#xd;
	&quot;Email&quot;: &quot;tonyam@konaoncogenex.com&quot;,&#xd;
	&quot;IsUnreadByOwner&quot;: &quot;true&quot;,&#xd;
	&quot;LastName&quot;: &quot;Shamon&quot;,&#xd;
	&quot;LeadSource&quot;: &quot;Other&quot;,&#xd;
	&quot;NumberOfEmployees&quot;: &quot;2359&quot;,&#xd;
	&quot;Phone&quot;: &quot;5676084276&quot;,&#xd;
	&quot;Status&quot;: &quot;Open&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/Lead/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">target_id_lead_20</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WorkflowStep/WorkflowStepTracker" enabled="false"/>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">String[] query = new String[]{&quot;NoMoreSteps&quot;, &quot;ManuallyRemoved&quot;, &quot;LeadConverted&quot;};
Random random = new Random();
int i = random.nextInt(query.length);
vars.put(&quot;TrackerReason&quot;,query[i]);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ActionCadence20" enabled="false"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Cadence" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
&quot;Name&quot;: &quot;mutateasdf${__time()}${__threadNum}&quot;,&#xd;
&quot;Description&quot;: &quot;This is a test. This is an involved discussion. Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.&quot;,&#xd;
&quot;OwnerId&quot;: &quot;${USERID}&quot;&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${crudPath}sobjects/ActionCadence</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CadenceId Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">CadenceId20Lead</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*)&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOCADENCEIDFOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TreeSave - Add 20 CadenceSteps" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
&quot;records&quot; :[{&#xd;
    &quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;root&quot;},&#xd;
    &quot;StepName&quot; : &quot;0&quot;,&#xd;
    &quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
    &quot;Type&quot; : &quot;ROOT&quot;,&#xd;
    &quot;ActionCadenceSteps&quot; : {&#xd;
        &quot;records&quot; : [ {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node0&quot;},&#xd;
&quot;StepName&quot; : &quot;Test0&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test0&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;0&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node1&quot;},&#xd;
&quot;StepName&quot; : &quot;Test1&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test1&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test0&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node2&quot;},&#xd;
&quot;StepName&quot; : &quot;Test2&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test2&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test1&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;SENDANEMAIL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node3&quot;},&#xd;
&quot;StepName&quot; : &quot;Test3&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test3&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test2&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
&#xd;
 {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node4&quot;},&#xd;
&quot;StepName&quot; : &quot;Test4&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test4&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test3&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node5&quot;},&#xd;
&quot;StepName&quot; : &quot;Test5&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test5&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test4&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node6&quot;},&#xd;
&quot;StepName&quot; : &quot;Test6&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test6&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test5&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;SENDANEMAIL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node7&quot;},&#xd;
&quot;StepName&quot; : &quot;Test7&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test7&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test6&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
&#xd;
 {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node8&quot;},&#xd;
&quot;StepName&quot; : &quot;Test8&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test8&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test7&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node9&quot;},&#xd;
&quot;StepName&quot; : &quot;Test9&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test9&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test8&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node10&quot;},&#xd;
&quot;StepName&quot; : &quot;Test10&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test10&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test9&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;SENDANEMAIL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node11&quot;},&#xd;
&quot;StepName&quot; : &quot;Test11&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test11&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test10&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
&#xd;
 {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node12&quot;},&#xd;
&quot;StepName&quot; : &quot;Test12&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test12&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test11&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node13&quot;},&#xd;
&quot;StepName&quot; : &quot;Test13&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test13&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test12&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node14&quot;},&#xd;
&quot;StepName&quot; : &quot;Test14&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test14&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test13&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;SENDANEMAIL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node15&quot;},&#xd;
&quot;StepName&quot; : &quot;Test15&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test15&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test14&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;108000&quot;&#xd;
},&#xd;
&#xd;
 {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node16&quot;},&#xd;
&quot;StepName&quot; : &quot;Test16&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test16&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test15&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node17&quot;},&#xd;
&quot;StepName&quot; : &quot;Test17&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test17&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test16&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node18&quot;},&#xd;
&quot;StepName&quot; : &quot;Test18&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test18&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test17&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;SENDANEMAIL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node19&quot;},&#xd;
&quot;StepName&quot; : &quot;Test19&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test19&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test18&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
 {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node20&quot;},&#xd;
&quot;StepName&quot; : &quot;Test20&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test20&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test19&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
}&#xd;
&#xd;
]&#xd;
        }&#xd;
    }]&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${crudPath}composite/tree/actioncadencestep</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-324329048">&quot;hasErrors&quot;:false</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RootStepId Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">RootStepId20Lead</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;referenceId&quot;:&quot;root&quot;,&quot;id&quot;:&quot;(8C8.{1,15})</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOCADENCEIDFOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SoapSave - Add 21st CadenceStep" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
&quot;ActionCadenceId&quot;: &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;ParentStepName&quot;: &quot;Test20&quot;,&#xd;
&quot;RootStepId&quot;: &quot;${RootStepId20Lead}&quot;,&#xd;
&quot;StepName&quot;: &quot;Test21&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test21&quot;,&#xd;
&quot;Type&quot;: &quot;SENDANEMAIL&quot;&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${crudPath}sobjects/ActionCadenceStep</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Publish 20 CadenceStep" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;State&quot;: &quot;Active&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${crudPath}sobjects/ActionCadence/${CadenceId20Lead}</stringProp>
                    <stringProp name="HTTPSampler.method">PATCH</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-324329048">&quot;hasErrors&quot;:false</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add Buyer" enabled="true"/>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOQL to find 1 buyer" enabled="false">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${crudPath}query?q=SELECT+Id+From+Lead+where+Id+NOT+IN+(SELECT+TargetId+FROM+ActionCadenceTracker+WHERE+State+!=+&apos;Complete&apos;)+AND+OwnerId+=+&apos;${USERID}&apos;+LIMIT+1</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-324329048">&quot;hasErrors&quot;:false</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="LeadID Extractor" enabled="false">
                        <stringProp name="RegexExtractor.useHeaders">message</stringProp>
                        <stringProp name="RegexExtractor.refname">LeadId20</stringProp>
                        <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(00Q.{1,15})&quot;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOCONTACTIDFOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">-1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">LeadId20</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.records[0].Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Buyer 20 CadenceStep" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{ &quot;inputs&quot; :&#xd;
  [&#xd;
  {&#xd;
    &quot;salesCadenceNameOrId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
    &quot;targetId&quot; : &quot;${target_id_lead_20}&quot;&#xd;
  }&#xd;
  ]&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${crudPath}actions/standard/assignTargetToSalesCadence</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1451445821">&quot;isSuccess&quot;:true</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOQL to fetch ActionCadenceTracker20" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${crudPath}query?q=SELECT+Id+From+ActionCadenceTracker+where+TargetId+=+&apos;${target_id_lead_20}&apos;+AND+OwnerId+=+&apos;${USERID}&apos;+LIMIT+1</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">ActionCadenceTracker20Lead</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.records[0].Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOQL to fetch ActionCadenceStepTracker20" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${crudPath}query?q=SELECT+Id+From+ActionCadenceStepTracker+where+TargetId+=+&apos;${target_id_lead_20}&apos;+LIMIT+1</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">ActionCadenceStepTracker20Lead</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.records[0].Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Contact " enabled="true">
                <stringProp name="TestPlan.comments">Need to select only one input file</stringProp>
              </GenericController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Generate Contact 20" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;AccountId&quot;: &quot;${account_id}&quot;,&#xd;
	&quot;Fax&quot;: &quot;5451614441&quot;,&#xd;
	&quot;FirstName&quot;: &quot;mutateadsfa&quot;,&#xd;
	&quot;LastName&quot;: &quot;${LastName}&quot;,&#xd;
	&quot;Phone&quot;: &quot;5451614441&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/Contact/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">target_id_contact_20</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WorkflowStep/WorkflowStepTracker" enabled="false"/>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">String[] query = new String[]{&quot;NoMoreSteps&quot;, &quot;ManuallyRemoved&quot;, &quot;LeadConverted&quot;};
Random random = new Random();
int i = random.nextInt(query.length);
vars.put(&quot;TrackerReason&quot;,query[i]);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ActionCadence20" enabled="false"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Cadence" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
&quot;Name&quot;: &quot;mutatecadence${__time()}${__threadNum}&quot;,&#xd;
&quot;Description&quot;: &quot;This is a test. This is an involved discussion. Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.&quot;,&#xd;
&quot;OwnerId&quot;: &quot;${USERID}&quot;&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${crudPath}sobjects/ActionCadence</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CadenceId Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">CadenceId20Contact</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*)&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOCADENCEIDFOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TreeSave - Add 20 CadenceSteps" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
&quot;records&quot; :[{&#xd;
    &quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;root&quot;},&#xd;
    &quot;StepName&quot; : &quot;0&quot;,&#xd;
    &quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
    &quot;Type&quot; : &quot;ROOT&quot;,&#xd;
    &quot;ActionCadenceSteps&quot; : {&#xd;
        &quot;records&quot; : [ {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node0&quot;},&#xd;
&quot;StepName&quot; : &quot;Test0&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test0&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;0&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node1&quot;},&#xd;
&quot;StepName&quot; : &quot;Test1&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test1&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test0&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node2&quot;},&#xd;
&quot;StepName&quot; : &quot;Test2&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test2&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test1&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;SENDANEMAIL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node3&quot;},&#xd;
&quot;StepName&quot; : &quot;Test3&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test3&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test2&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
&#xd;
 {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node4&quot;},&#xd;
&quot;StepName&quot; : &quot;Test4&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test4&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test3&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node5&quot;},&#xd;
&quot;StepName&quot; : &quot;Test5&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test5&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test4&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node6&quot;},&#xd;
&quot;StepName&quot; : &quot;Test6&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test6&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test5&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;SENDANEMAIL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node7&quot;},&#xd;
&quot;StepName&quot; : &quot;Test7&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test7&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test6&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
&#xd;
 {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node8&quot;},&#xd;
&quot;StepName&quot; : &quot;Test8&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test8&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test7&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node9&quot;},&#xd;
&quot;StepName&quot; : &quot;Test9&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test9&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test8&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node10&quot;},&#xd;
&quot;StepName&quot; : &quot;Test10&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test10&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test9&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;SENDANEMAIL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node11&quot;},&#xd;
&quot;StepName&quot; : &quot;Test11&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test11&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test10&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
&#xd;
 {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node12&quot;},&#xd;
&quot;StepName&quot; : &quot;Test12&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test12&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test11&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node13&quot;},&#xd;
&quot;StepName&quot; : &quot;Test13&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test13&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test12&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node14&quot;},&#xd;
&quot;StepName&quot; : &quot;Test14&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test14&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test13&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;SENDANEMAIL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node15&quot;},&#xd;
&quot;StepName&quot; : &quot;Test15&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test15&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test14&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;108000&quot;&#xd;
},&#xd;
&#xd;
 {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node16&quot;},&#xd;
&quot;StepName&quot; : &quot;Test16&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test16&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test15&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node17&quot;},&#xd;
&quot;StepName&quot; : &quot;Test17&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test17&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test16&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node18&quot;},&#xd;
&quot;StepName&quot; : &quot;Test18&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test18&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test17&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;SENDANEMAIL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node19&quot;},&#xd;
&quot;StepName&quot; : &quot;Test19&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test19&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test18&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
 {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node20&quot;},&#xd;
&quot;StepName&quot; : &quot;Test20&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test20&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test19&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
}&#xd;
&#xd;
]&#xd;
        }&#xd;
    }]&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${crudPath}composite/tree/actioncadencestep</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-324329048">&quot;hasErrors&quot;:false</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RootStepId Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">RootStepId20Contact</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;referenceId&quot;:&quot;root&quot;,&quot;id&quot;:&quot;(8C8.{1,15})</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOCADENCEIDFOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SoapSave - Add 21st CadenceStep" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
&quot;ActionCadenceId&quot;: &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;ParentStepName&quot;: &quot;Test20&quot;,&#xd;
&quot;RootStepId&quot;: &quot;${RootStepId20Contact}&quot;,&#xd;
&quot;StepName&quot;: &quot;Test21&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test21&quot;,&#xd;
&quot;Type&quot;: &quot;SENDANEMAIL&quot;&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${crudPath}sobjects/ActionCadenceStep</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Publish 20 CadenceStep" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;State&quot;: &quot;Active&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${crudPath}sobjects/ActionCadence/${CadenceId20Contact}</stringProp>
                    <stringProp name="HTTPSampler.method">PATCH</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-324329048">&quot;hasErrors&quot;:false</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add Buyer" enabled="true"/>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOQL to find 1 buyer" enabled="false">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${crudPath}query?q=SELECT+Id+From+Contact+where+Id+NOT+IN+(SELECT+TargetId+FROM+ActionCadenceTracker+WHERE+State+!=+&apos;Complete&apos;)+AND+OwnerId+=+&apos;${USERID}&apos;+LIMIT+1</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-324329048">&quot;hasErrors&quot;:false</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="LeadID Extractor" enabled="false">
                        <stringProp name="RegexExtractor.useHeaders">message</stringProp>
                        <stringProp name="RegexExtractor.refname">LeadId20</stringProp>
                        <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(00Q.{1,15})&quot;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOCONTACTIDFOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">-1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">ContactId20</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.records[0].Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Buyer 20 CadenceStep" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{ &quot;inputs&quot; :&#xd;
  [&#xd;
  {&#xd;
    &quot;salesCadenceNameOrId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
    &quot;targetId&quot; : &quot;${target_id_contact_20}&quot;&#xd;
  }&#xd;
  ]&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${crudPath}actions/standard/assignTargetToSalesCadence</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1451445821">&quot;isSuccess&quot;:true</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOQL to fetch ActionCadenceTracker20" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${crudPath}query?q=SELECT+Id+From+ActionCadenceTracker+where+TargetId+=+&apos;${target_id_contact_20}&apos;+AND+OwnerId+=+&apos;${USERID}&apos;+LIMIT+1</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">ActionCadenceTracker20Contact</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.records[0].Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOQL to fetch ActionCadenceStepTracker20" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${crudPath}query?q=SELECT+Id+From+ActionCadenceStepTracker+where+TargetId+=+&apos;${target_id_contact_20}&apos;+LIMIT+1</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">ActionCadenceStepTracker20Contact</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.records[0].Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Channel Vehicle Controller" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Task" enabled="true">
                  <stringProp name="TestPlan.comments">Need to select only one input file</stringProp>
                </GenericController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Task" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;CallType&quot;: &quot;Outbound&quot;,&#xd;
	&quot;Description&quot;: &quot;afaf&quot;,&#xd;
	&quot;Subject&quot;: &quot;sdfa: say hello, simple cadence, test lead, test co&quot;,&#xd;
	&quot;Status&quot;: &quot;Completed&quot;,&#xd;
	&quot;TaskSubtype&quot;:&quot;Call&quot;&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/Task/</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">task_id</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="EmailMessage" enabled="false">
                  <stringProp name="TestPlan.comments">Need to select only one input file</stringProp>
                </GenericController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Email MEssage 20 contact" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;ActionCadenceStepTrackerId&quot;:&quot;${ActionCadenceStepTracker20Contact}&quot;,&#xd;
	&quot;FromAddress&quot;:&quot;duncan.macleod@salesforce.com&quot;,&#xd;
	&quot;Subject&quot;:&quot;dflwe&quot;,&#xd;
	&quot;Status&quot;:&quot;3&quot;,&#xd;
	&quot;ToAddress&quot;:&quot;info@salesforce.com&quot;	&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/EmailMessage/</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">email_message_id_20_contact</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Email MEssage 20 lead" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;ActionCadenceStepTrackerId&quot;:&quot;${ActionCadenceStepTracker20Lead}&quot;,&#xd;
	&quot;FromAddress&quot;:&quot;duncan.macleod@salesforce.com&quot;,&#xd;
	&quot;Subject&quot;:&quot;sdfakl&quot;,&#xd;
	&quot;Status&quot;:&quot;3&quot;,&#xd;
	&quot;ToAddress&quot;:&quot;info@salesforce.com&quot;	&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/EmailMessage/</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">email_message_id_20_lead</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Per Thread" enabled="true"/>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login using SOAP" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &#xd;
   &lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; &#xd;
                  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#xd;
                  xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt; &#xd;
      &lt;soap:Body&gt; &#xd;
         &lt;login xmlns=&quot;urn:enterprise.soap.sforce.com&quot;&gt; &#xd;
            &lt;username&gt;${username}&lt;/username&gt; &#xd;
            &lt;password&gt;${PASSWORD}&lt;/password&gt; &#xd;
         &lt;/login&gt; &#xd;
      &lt;/soap:Body&gt; &#xd;
   &lt;/soap:Envelope&gt; </stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                      <stringProp name="HTTPSampler.port">${PORT}</stringProp>
                      <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${LOGINPATH}/${APIVERSION}/</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-type</stringProp>
                            <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">SOAPAction</stringProp>
                            <stringProp name="Header.value">login</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
                        <stringProp name="XPathExtractor.default">NOSESSIONFOUND</stringProp>
                        <stringProp name="XPathExtractor.refname">SESSIONID</stringProp>
                        <stringProp name="XPathExtractor.xpathQuery">/Envelope/Body/loginResponse/result/sessionId</stringProp>
                        <boolProp name="XPathExtractor.validate">false</boolProp>
                        <boolProp name="XPathExtractor.tolerant">false</boolProp>
                        <boolProp name="XPathExtractor.namespace">false</boolProp>
                        <stringProp name="Scope.variable">SESSIONID</stringProp>
                        <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                      </XPathExtractor>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-845505811">NOSESSIONFOUND</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">6</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">SESSIONID</stringProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Event" enabled="false">
                  <stringProp name="TestPlan.comments">Need to select only one input file</stringProp>
                </GenericController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Eventcontact 20" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;ActivityDate&quot;: &quot;2019-09-30&quot;,&#xd;
	&quot;ActivityDateTime&quot;:&quot;2019-09-30T18:18:48.000Z&quot;,&#xd;
	&quot;DurationInMinutes&quot;:&quot;60&quot;,&#xd;
	&quot;Subject&quot;:&quot;mutate subject${__time()}&quot;,&#xd;
	&quot;WhoId&quot;:&quot;${target_id_contact_20}&quot;&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/Event/</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">event_id_contact_20</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Eventlead 20" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;ActivityDate&quot;: &quot;2019-09-30&quot;,&#xd;
	&quot;ActivityDateTime&quot;:&quot;2019-09-30T18:18:48.000Z&quot;,&#xd;
	&quot;DurationInMinutes&quot;:&quot;60&quot;,&#xd;
	&quot;Subject&quot;:&quot;mutate subject${__time()}&quot;,&#xd;
	&quot;WhoId&quot;:&quot;${target_id_lead_20}&quot;&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/Event/</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">event_id_lead_20</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ListEmail" enabled="false">
                  <stringProp name="TestPlan.comments">Need to select only one input file</stringProp>
                </GenericController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List Email" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;FromAddress&quot;: &quot;j.guo@salesforce.com&quot;,&#xd;
	&quot;Name&quot;: &quot;skdfnasf&quot;,&#xd;
	&quot;Status&quot;:&quot;draft&quot;,&#xd;
	&quot;Subject&quot;: &quot;asdfadfa&quot;&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/ListEmail/</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">list_email_id</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Template " enabled="false"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Email Template " enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;Body&quot;: &quot;mutate&quot;,&#xd;
	&quot;Description&quot;: &quot;Notification of login and password to new Self-Service user&quot;,&#xd;
	&quot;DeveloperName&quot;: &quot;mutate${__time()}&quot;,&#xd;
	&quot;FolderId&quot;: &quot;${USERID}&quot;,&#xd;
	&quot;Encoding&quot;: &quot;ISO-8859-1&quot;,&#xd;
	&quot;IsActive&quot;: &quot;true&quot;,&#xd;
	&quot;Name&quot;: &quot;SUPPORT: Self-Service New User Login Information${__time()}&quot;,&#xd;
	&quot;Subject&quot;: &quot;Your {!Organization.Name} Self-Service username and password&quot;,&#xd;
	&quot;TemplateStyle&quot;: &quot;none&quot;,&#xd;
	&quot;TemplateType&quot;: &quot;text&quot;,&#xd;
	&quot;UiType&quot;: &quot;Aloha&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/EmailTemplate/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">template_id</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WriteToCSV" enabled="true"/>
              <hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String orgid = vars.get(&quot;ORGID&quot;);
String username = vars.get(&quot;USERNAME&quot;);
String userid = vars.get(&quot;USERID&quot;);
String leadid20 = &quot;${target_id_lead_20}&quot;; // vars.get();
String contactid20 = &quot;${target_id_contact_20}&quot;; // vars.get();
String taskid=&quot;${task_id}&quot;;
// Pass true if you want to append to existing file
// If you want to overwrite, then don&apos;t pass the second argument
f = new FileOutputStream(vars.get(&quot;saveFieldsPath&quot;)+vars.get(&quot;saveFileName&quot;), true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(orgid + &quot;,&quot; + username + &quot;,&quot; + userid + &quot;,&quot; + leadid20 + &quot;,&quot; + contactid20 + &quot;,&quot; + taskid);
f.close();
</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
                  <intProp name="calcMode">4</intProp>
                  <stringProp name="throughput">${THROUGHPUT_PER_MIN}</stringProp>
                </ConstantThroughputTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
