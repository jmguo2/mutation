<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Publish Events to EMP" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">PROTOCOL</stringProp>
            <stringProp name="Argument.value">${__P(protocol,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">${__P(host,dbl23.soma.salesforce.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">${__P(port,443)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOGINPATH" elementType="Argument">
            <stringProp name="Argument.name">LOGINPATH</stringProp>
            <stringProp name="Argument.value">${__P(path,/services/Soap/c)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RESTPATH" elementType="Argument">
            <stringProp name="Argument.name">RESTPATH</stringProp>
            <stringProp name="Argument.value">${__P(path,/services/data)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ENTITYPATH" elementType="Argument">
            <stringProp name="Argument.name">ENTITYPATH</stringProp>
            <stringProp name="Argument.value">${__P(entitypath,sobjects/alert__e)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APITYPE" elementType="Argument">
            <stringProp name="Argument.name">APITYPE</stringProp>
            <stringProp name="Argument.value">${__P(apitype,composite)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="APIVERSION" elementType="Argument">
            <stringProp name="Argument.name">APIVERSION</stringProp>
            <stringProp name="Argument.value">${__P(apiversion,47.0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(password,test12345)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THREADS" elementType="Argument">
            <stringProp name="Argument.name">THREADS</stringProp>
            <stringProp name="Argument.value">${__P(threads,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMP_UP_TIME_IN_S" elementType="Argument">
            <stringProp name="Argument.name">RAMP_UP_TIME_IN_S</stringProp>
            <stringProp name="Argument.value">${__P(jmeter_ramp_up_time_in_s,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="THROUGHPUT_PER_MIN" elementType="Argument">
            <stringProp name="Argument.name">THROUGHPUT_PER_MIN</stringProp>
            <stringProp name="Argument.value">${__P(throughput_per_min,60)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TIME" elementType="Argument">
            <stringProp name="Argument.name">TIME</stringProp>
            <stringProp name="Argument.value">${__time(,curTime)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ORGANDUSERINFO" elementType="Argument">
            <stringProp name="Argument.name">ORGANDUSERINFO</stringProp>
            <stringProp name="Argument.value">${__P(input_file,/Users/j.guo/Perf-scripts-to-enable-HVS/datasetup/Mutations/test.txt)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loginPath" elementType="Argument">
            <stringProp name="Argument.name">loginPath</stringProp>
            <stringProp name="Argument.value">${__P(loginPath,/services/Soap/c/47.0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="crudPath" elementType="Argument">
            <stringProp name="Argument.name">crudPath</stringProp>
            <stringProp name="Argument.value">${__P(crudPath,/services/data/v47.0/)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="saveFieldsPath" elementType="Argument">
            <stringProp name="Argument.name">saveFieldsPath</stringProp>
            <stringProp name="Argument.value">/Users/j.guo/Perf-scripts-to-enable-HVS/datasetup/Mutations/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ITEMS_PER_REQ" elementType="Argument">
            <stringProp name="Argument.name">ITEMS_PER_REQ</stringProp>
            <stringProp name="Argument.value">${__P(items_per_req,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMP_UP_TIME_IN_S}</stringProp>
        <longProp name="ThreadGroup.start_time">1490329943000</longProp>
        <longProp name="ThreadGroup.end_time">1490329943000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Org input file " enabled="true">
          <stringProp name="filename">${ORGANDUSERINFO}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">ORGID,USERNAME,USERID</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login using SOAP" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &#xd;
   &lt;soap:Envelope xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; &#xd;
                  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#xd;
                  xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt; &#xd;
      &lt;soap:Body&gt; &#xd;
         &lt;login xmlns=&quot;urn:enterprise.soap.sforce.com&quot;&gt; &#xd;
            &lt;username&gt;${USERNAME}&lt;/username&gt; &#xd;
            &lt;password&gt;${PASSWORD}&lt;/password&gt; &#xd;
         &lt;/login&gt; &#xd;
      &lt;/soap:Body&gt; &#xd;
   &lt;/soap:Envelope&gt; </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port">${PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${LOGINPATH}/${APIVERSION}/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-type</stringProp>
                <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">login</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
            <stringProp name="XPathExtractor.default">NOSESSIONFOUND</stringProp>
            <stringProp name="XPathExtractor.refname">SESSIONID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">/Envelope/Body/loginResponse/result/sessionId</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
            <stringProp name="Scope.variable">SESSIONID</stringProp>
            <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
          </XPathExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-845505811">NOSESSIONFOUND</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">SESSIONID</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Publish Events" enabled="true"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Login Successful Then Publish" enabled="true">
            <stringProp name="IfController.condition">&quot;${SESSIONID}&quot; != &quot;NOSESSIONFOUND&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Account" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Generate Account" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;BillingCity&quot;: &quot;SanFrancisco&quot;,&#xd;
	&quot;BillingCountry&quot;: &quot;UnitedStates&quot;,&#xd;
	&quot;BillingPostalCode&quot;: &quot;qISS&quot;,&#xd;
	&quot;BillingState&quot;: &quot;Tlzl&quot;,&#xd;
	&quot;BillingStreet&quot;: &quot;dapJ&quot;,&#xd;
	&quot;Name&quot;: &quot;SFX_Person Account_mutate${__time()}&quot;,&#xd;
	&quot;Phone&quot;: &quot;5451614441&quot;,&#xd;
	&quot;ShippingCity&quot;: &quot;SanFrancisco&quot;,&#xd;
	&quot;ShippingCountry&quot;: &quot;UnitedStates&quot;,&#xd;
	&quot;Type&quot;: &quot;Prospect&quot;&#xd;
}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/Account/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">account_id</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lead/Contact Delete" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <intProp name="LoopController.loops">-1</intProp>
            </LoopController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Lead" enabled="true">
                <stringProp name="TestPlan.comments">Need to select only one input file</stringProp>
              </GenericController>
              <hashTree>
                <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lead Controller" enabled="true">
                  <boolProp name="LoopController.continue_forever">true</boolProp>
                  <stringProp name="LoopController.loops">${ITEMS_PER_REQ}</stringProp>
                </LoopController>
                <hashTree>
                  <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Lead Counter" enabled="true">
                    <stringProp name="CounterConfig.start">1</stringProp>
                    <stringProp name="CounterConfig.end">${ITEMS_PER_REQ}</stringProp>
                    <stringProp name="CounterConfig.incr">1</stringProp>
                    <stringProp name="CounterConfig.name">LOOP_CNT</stringProp>
                    <stringProp name="CounterConfig.format"></stringProp>
                    <boolProp name="CounterConfig.per_user">true</boolProp>
                    <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                  </CounterConfig>
                  <hashTree/>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                    <stringProp name="BeanShellSampler.query">String leadcreate = &quot;{&quot; +
	&quot;\&quot;attributes\&quot;:&quot; + &quot;{\&quot;type\&quot;: \&quot;Lead\&quot;}&quot; + &quot;,&quot; + 
	&quot;\&quot;Company\&quot;:\&quot;&quot; + &quot;mutate asdfafadf${__time()}&quot; + &quot;\&quot;,&quot; + 
	&quot;\&quot;LastName\&quot;:\&quot;&quot; + &quot;mutations&quot; + &quot;\&quot;,&quot; + 
	&quot;\&quot;City\&quot;:\&quot;&quot; + &quot;Plymouth&quot; + &quot;\&quot;,&quot; + 
	&quot;\&quot;Email\&quot;:\&quot;&quot; + &quot;tonyam@konaoncogenex.com&quot; + &quot;\&quot;,&quot; + 
	&quot;\&quot;IsUnreadByOwner\&quot;:\&quot;&quot; +  &quot;true&quot; + &quot;\&quot;,&quot; + 
	&quot;\&quot;LastName\&quot;:\&quot;&quot; + &quot;mutate&quot; + &quot;\&quot;,&quot; + 
	&quot;\&quot;LeadSource\&quot;:\&quot;&quot; +  &quot;Other&quot; + &quot;\&quot;,&quot; + 
	&quot;\&quot;NumberOfEmployees\&quot;:\&quot;&quot; + &quot;13123&quot; + &quot;\&quot;,&quot; + 
	&quot;\&quot;Phone\&quot;:\&quot;&quot; + &quot;4081234567&quot; + &quot;\&quot;,&quot; + 
	&quot;\&quot;Status\&quot;:\&quot;&quot; + &quot;Open&quot; + &quot;\&quot;&quot; +
&quot;}&quot;;

int loopCnt = Integer.parseInt(vars.get(&quot;LOOP_CNT&quot;));
int emailsPerReq = Integer.parseInt(vars.get(&quot;ITEMS_PER_REQ&quot;));

String msg = vars.get(&quot;leads&quot;);
if (loopCnt == 1) {
	// initialize message
	msg = &quot;[&quot; + leadcreate;
} else {
     msg = msg + &quot;,&quot; + leadcreate;
};
if (loopCnt == emailsPerReq) {
     // finalize message
     msg = msg + &quot;]&quot;;
}
vars.put(&quot;leads&quot;,msg);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Generate Leads" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;allOrNone&quot;: false,&#xd;
&quot;records&quot;: ${leads}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/composite/sobjects</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">leadids</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WorkflowStep/WorkflowStepTracker" enabled="false"/>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">String[] query = new String[]{&quot;NoMoreSteps&quot;, &quot;ManuallyRemoved&quot;, &quot;LeadConverted&quot;};
Random random = new Random();
int i = random.nextInt(query.length);
vars.put(&quot;TrackerReason&quot;,query[i]);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ActionCadence20" enabled="false"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Cadence" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
&quot;Name&quot;: &quot;TestCadence${__time()}&quot;,&#xd;
&quot;Description&quot;: &quot;This is a test. This is an involved discussion. Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.&quot;,&#xd;
&quot;OwnerId&quot;: &quot;${USERID}&quot;&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${crudPath}sobjects/ActionCadence</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CadenceId Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">CadenceId20Lead</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*)&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOCADENCEIDFOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TreeSave - Add 20 CadenceSteps" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
&quot;records&quot; :[{&#xd;
    &quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;root&quot;},&#xd;
    &quot;StepName&quot; : &quot;0&quot;,&#xd;
    &quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
    &quot;Type&quot; : &quot;ROOT&quot;,&#xd;
    &quot;ActionCadenceSteps&quot; : {&#xd;
        &quot;records&quot; : [ {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node0&quot;},&#xd;
&quot;StepName&quot; : &quot;Test0&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test0&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;0&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node1&quot;},&#xd;
&quot;StepName&quot; : &quot;Test1&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test1&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test0&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node2&quot;},&#xd;
&quot;StepName&quot; : &quot;Test2&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test2&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test1&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;SENDANEMAIL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node3&quot;},&#xd;
&quot;StepName&quot; : &quot;Test3&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test3&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test2&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
&#xd;
 {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node4&quot;},&#xd;
&quot;StepName&quot; : &quot;Test4&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test4&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test3&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node5&quot;},&#xd;
&quot;StepName&quot; : &quot;Test5&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test5&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test4&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node6&quot;},&#xd;
&quot;StepName&quot; : &quot;Test6&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test6&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test5&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;SENDANEMAIL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node7&quot;},&#xd;
&quot;StepName&quot; : &quot;Test7&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test7&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test6&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
&#xd;
 {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node8&quot;},&#xd;
&quot;StepName&quot; : &quot;Test8&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test8&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test7&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node9&quot;},&#xd;
&quot;StepName&quot; : &quot;Test9&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test9&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test8&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node10&quot;},&#xd;
&quot;StepName&quot; : &quot;Test10&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test10&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test9&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;SENDANEMAIL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node11&quot;},&#xd;
&quot;StepName&quot; : &quot;Test11&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test11&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test10&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
&#xd;
 {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node12&quot;},&#xd;
&quot;StepName&quot; : &quot;Test12&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test12&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test11&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node13&quot;},&#xd;
&quot;StepName&quot; : &quot;Test13&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test13&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test12&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node14&quot;},&#xd;
&quot;StepName&quot; : &quot;Test14&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test14&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test13&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;SENDANEMAIL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node15&quot;},&#xd;
&quot;StepName&quot; : &quot;Test15&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test15&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test14&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;108000&quot;&#xd;
},&#xd;
&#xd;
 {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node16&quot;},&#xd;
&quot;StepName&quot; : &quot;Test16&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test16&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test15&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node17&quot;},&#xd;
&quot;StepName&quot; : &quot;Test17&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test17&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test16&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node18&quot;},&#xd;
&quot;StepName&quot; : &quot;Test18&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test18&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test17&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;SENDANEMAIL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node19&quot;},&#xd;
&quot;StepName&quot; : &quot;Test19&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test19&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test18&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
 {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node20&quot;},&#xd;
&quot;StepName&quot; : &quot;Test20&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test20&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test19&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
}&#xd;
&#xd;
]&#xd;
        }&#xd;
    }]&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${crudPath}composite/tree/actioncadencestep</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-324329048">&quot;hasErrors&quot;:false</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RootStepId Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">RootStepId20Lead</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;referenceId&quot;:&quot;root&quot;,&quot;id&quot;:&quot;(8C8.{1,15})</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOCADENCEIDFOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SoapSave - Add 21st CadenceStep" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
&quot;ActionCadenceId&quot;: &quot;${CadenceId20Lead}&quot;,&#xd;
&quot;ParentStepName&quot;: &quot;Test20&quot;,&#xd;
&quot;RootStepId&quot;: &quot;${RootStepId20Lead}&quot;,&#xd;
&quot;StepName&quot;: &quot;Test21&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test21&quot;,&#xd;
&quot;Type&quot;: &quot;SENDANEMAIL&quot;&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${crudPath}sobjects/ActionCadenceStep</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Publish 20 CadenceStep" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;State&quot;: &quot;Active&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${crudPath}sobjects/ActionCadence/${CadenceId20Lead}</stringProp>
                    <stringProp name="HTTPSampler.method">PATCH</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-324329048">&quot;hasErrors&quot;:false</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add Buyer" enabled="true"/>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOQL to find 1 buyer" enabled="false">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${crudPath}query?q=SELECT+Id+From+Lead+where+Id+NOT+IN+(SELECT+TargetId+FROM+ActionCadenceTracker+WHERE+State+!=+&apos;Complete&apos;)+AND+OwnerId+=+&apos;${USERID}&apos;+LIMIT+1</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-324329048">&quot;hasErrors&quot;:false</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="LeadID Extractor" enabled="false">
                        <stringProp name="RegexExtractor.useHeaders">message</stringProp>
                        <stringProp name="RegexExtractor.refname">LeadId20</stringProp>
                        <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(00Q.{1,15})&quot;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOCONTACTIDFOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">-1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">LeadId20</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.records[0].Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Buyer 20 CadenceStep" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{ &quot;inputs&quot; :&#xd;
  [&#xd;
  {&#xd;
    &quot;salesCadenceNameOrId&quot; : &quot;${CadenceId20Lead}&quot;,&#xd;
    &quot;targetId&quot; : &quot;${target_id_lead_20}&quot;&#xd;
  }&#xd;
  ]&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${crudPath}actions/standard/assignTargetToSalesCadence</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1451445821">&quot;isSuccess&quot;:true</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                      <stringProp name="BeanShellSampler.query">String s = &quot;${USERID}&quot;; 
print(s);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOQL to fetch ActionCadenceTracker20" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${crudPath}query?q=SELECT+Id+From+ActionCadenceTracker+where+TargetId+=+&apos;${target_id_lead_20}&apos;+AND+OwnerId+=+&apos;${USERID}&apos;+LIMIT+1</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">ActionCadenceTracker20Lead</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.records[0].Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOQL to fetch ActionCadenceStepTracker20" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${crudPath}query?q=SELECT+Id+From+ActionCadenceStepTracker+where+TargetId+=+&apos;${target_id_lead_20}&apos;+LIMIT+1</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">ActionCadenceStepTracker20Lead</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.records[0].Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Concat" enabled="true">
                  <stringProp name="BeanShellSampler.query">int emailsPerReq = Integer.parseInt(vars.get(&quot;ITEMS_PER_REQ&quot;));
String allleads = &quot;&quot;;
for (int i = 1; i &lt; emailsPerReq; i++) {
	String leadvar = &quot;leadids_&quot; + String.valueOf(i);
	allleads = allleads + vars.get(leadvar) + &quot;,&quot;;
}
String lastLead = &quot;leadids_&quot; + String.valueOf(emailsPerReq);
allleads = allleads + vars.get(lastLead);
vars.put(&quot;allleads&quot;, allleads);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Leads" enabled="false">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="ids" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${allleads}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">ids</stringProp>
                      </elementProp>
                      <elementProp name="allOrNone" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">allOrNone</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/composite/sobjects</stringProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
                    <intProp name="calcMode">4</intProp>
                    <stringProp name="throughput">${THROUGHPUT_PER_MIN}</stringProp>
                  </ConstantThroughputTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Contact " enabled="false">
                <stringProp name="TestPlan.comments">Need to select only one input file</stringProp>
              </GenericController>
              <hashTree>
                <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Contact Controller" enabled="true">
                  <boolProp name="LoopController.continue_forever">true</boolProp>
                  <stringProp name="LoopController.loops">${ITEMS_PER_REQ}</stringProp>
                </LoopController>
                <hashTree>
                  <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Email Counter" enabled="true">
                    <stringProp name="CounterConfig.start">1</stringProp>
                    <stringProp name="CounterConfig.end">${ITEMS_PER_REQ}</stringProp>
                    <stringProp name="CounterConfig.incr">1</stringProp>
                    <stringProp name="CounterConfig.name">LOOP_CNT_CONTACT</stringProp>
                    <stringProp name="CounterConfig.format"></stringProp>
                    <boolProp name="CounterConfig.per_user">true</boolProp>
                    <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                  </CounterConfig>
                  <hashTree/>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                    <stringProp name="BeanShellSampler.query">String contactcreate = &quot;{&quot; +
	&quot;\&quot;attributes\&quot;:&quot; + &quot;{\&quot;type\&quot;: \&quot;Contact\&quot;}&quot; + &quot;,&quot; + 
	&quot;\&quot;AccountId\&quot;:\&quot;&quot; + vars.get(&quot;account_id&quot;) + &quot;\&quot;,&quot; + 
	&quot;\&quot;Fax\&quot;:\&quot;&quot; + &quot;12341324&quot; + &quot;\&quot;,&quot; + 
	&quot;\&quot;FirstName\&quot;:\&quot;&quot; + &quot;contactmutate&quot; + &quot;\&quot;,&quot; + 
	&quot;\&quot;LastName\&quot;:\&quot;&quot; + &quot;asdfsaf${__time()}&quot; + &quot;\&quot;,&quot; + 
	&quot;\&quot;Phone\&quot;:\&quot;&quot; + &quot;4081234567&quot; + &quot;\&quot;&quot; + 
&quot;}&quot;;

int loopCnt = Integer.parseInt(vars.get(&quot;LOOP_CNT_CONTACT&quot;));
int emailsPerReq = Integer.parseInt(vars.get(&quot;ITEMS_PER_REQ&quot;));

String msg = vars.get(&quot;contacts&quot;);
if (loopCnt == 1) {
	// initialize message
	msg = &quot;[&quot; + contactcreate;
} else {
     msg = msg + &quot;,&quot; + contactcreate;
};
if (loopCnt == emailsPerReq) {
     // finalize message
     msg = msg + &quot;]&quot;;
}
vars.put(&quot;contacts&quot;,msg);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Generate Contacts" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;allOrNone&quot;: false,&#xd;
&quot;records&quot;: ${contacts}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/composite/sobjects</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">contactids</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Concat" enabled="true">
                  <stringProp name="BeanShellSampler.query">int emailsPerReq = Integer.parseInt(vars.get(&quot;ITEMS_PER_REQ&quot;));
String allcontacts = &quot;&quot;;
for (int i = 1; i &lt; emailsPerReq; i++) {
	String contactvar = &quot;contactids_&quot; + String.valueOf(i);
	allcontacts = allcontacts + vars.get(contactvar) + &quot;,&quot;;
}
String lastcontact = &quot;contactids_&quot; + String.valueOf(emailsPerReq);
allcontacts = allcontacts + vars.get(lastcontact);
vars.put(&quot;allcontacts&quot;, allcontacts);</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
                <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugSampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WorkflowStep/WorkflowStepTracker" enabled="false"/>
                <hashTree>
                  <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">String[] query = new String[]{&quot;NoMoreSteps&quot;, &quot;ManuallyRemoved&quot;, &quot;LeadConverted&quot;};
Random random = new Random();
int i = random.nextInt(query.length);
vars.put(&quot;TrackerReason&quot;,query[i]);</stringProp>
                  </BeanShellPreProcessor>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ActionCadence20" enabled="false"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Cadence" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
&quot;Name&quot;: &quot;TestCadence${__time()}&quot;,&#xd;
&quot;Description&quot;: &quot;This is a test. This is an involved discussion. Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.&quot;,&#xd;
&quot;OwnerId&quot;: &quot;${USERID}&quot;&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${crudPath}sobjects/ActionCadence</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CadenceId Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">CadenceId20Contact</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.*)&quot;,</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOCADENCEIDFOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TreeSave - Add 20 CadenceSteps" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
&quot;records&quot; :[{&#xd;
    &quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;root&quot;},&#xd;
    &quot;StepName&quot; : &quot;0&quot;,&#xd;
    &quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
    &quot;Type&quot; : &quot;ROOT&quot;,&#xd;
    &quot;ActionCadenceSteps&quot; : {&#xd;
        &quot;records&quot; : [ {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node0&quot;},&#xd;
&quot;StepName&quot; : &quot;Test0&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test0&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;0&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node1&quot;},&#xd;
&quot;StepName&quot; : &quot;Test1&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test1&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test0&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node2&quot;},&#xd;
&quot;StepName&quot; : &quot;Test2&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test2&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test1&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;SENDANEMAIL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node3&quot;},&#xd;
&quot;StepName&quot; : &quot;Test3&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test3&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test2&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
&#xd;
 {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node4&quot;},&#xd;
&quot;StepName&quot; : &quot;Test4&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test4&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test3&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node5&quot;},&#xd;
&quot;StepName&quot; : &quot;Test5&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test5&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test4&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node6&quot;},&#xd;
&quot;StepName&quot; : &quot;Test6&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test6&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test5&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;SENDANEMAIL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node7&quot;},&#xd;
&quot;StepName&quot; : &quot;Test7&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test7&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test6&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
&#xd;
 {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node8&quot;},&#xd;
&quot;StepName&quot; : &quot;Test8&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test8&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test7&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node9&quot;},&#xd;
&quot;StepName&quot; : &quot;Test9&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test9&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test8&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node10&quot;},&#xd;
&quot;StepName&quot; : &quot;Test10&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test10&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test9&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;SENDANEMAIL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node11&quot;},&#xd;
&quot;StepName&quot; : &quot;Test11&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test11&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test10&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
&#xd;
 {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node12&quot;},&#xd;
&quot;StepName&quot; : &quot;Test12&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test12&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test11&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node13&quot;},&#xd;
&quot;StepName&quot; : &quot;Test13&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test13&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test12&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node14&quot;},&#xd;
&quot;StepName&quot; : &quot;Test14&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test14&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test13&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;SENDANEMAIL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node15&quot;},&#xd;
&quot;StepName&quot; : &quot;Test15&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test15&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test14&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;108000&quot;&#xd;
},&#xd;
&#xd;
 {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node16&quot;},&#xd;
&quot;StepName&quot; : &quot;Test16&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test16&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test15&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node17&quot;},&#xd;
&quot;StepName&quot; : &quot;Test17&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test17&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test16&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node18&quot;},&#xd;
&quot;StepName&quot; : &quot;Test18&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test18&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test17&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;SENDANEMAIL&quot;&#xd;
},&#xd;
{&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node19&quot;},&#xd;
&quot;StepName&quot; : &quot;Test19&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test19&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test18&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;WAIT&quot;,&#xd;
&quot;WaitTimeInSeconds&quot; : &quot;10800&quot;&#xd;
},&#xd;
 {&#xd;
&quot;attributes&quot; : {&quot;type&quot; : &quot;ActionCadenceStep&quot;, &quot;referenceId&quot; : &quot;node20&quot;},&#xd;
&quot;StepName&quot; : &quot;Test20&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test20&quot;,&#xd;
&quot;ParentStepName&quot; : &quot;Test19&quot;,&#xd;
&quot;ActionCadenceId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;Type&quot; : &quot;MAKEACALL&quot;&#xd;
}&#xd;
&#xd;
]&#xd;
        }&#xd;
    }]&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${crudPath}composite/tree/actioncadencestep</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-324329048">&quot;hasErrors&quot;:false</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                    <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RootStepId Extractor" enabled="true">
                      <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                      <stringProp name="RegexExtractor.refname">RootStepId20Contact</stringProp>
                      <stringProp name="RegexExtractor.regex">&quot;referenceId&quot;:&quot;root&quot;,&quot;id&quot;:&quot;(8C8.{1,15})</stringProp>
                      <stringProp name="RegexExtractor.template">$1$</stringProp>
                      <stringProp name="RegexExtractor.default">NOCADENCEIDFOUND</stringProp>
                      <stringProp name="RegexExtractor.match_number">1</stringProp>
                    </RegexExtractor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SoapSave - Add 21st CadenceStep" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
&quot;ActionCadenceId&quot;: &quot;${CadenceId20Contact}&quot;,&#xd;
&quot;ParentStepName&quot;: &quot;Test20&quot;,&#xd;
&quot;RootStepId&quot;: &quot;${RootStepId20Contact}&quot;,&#xd;
&quot;StepName&quot;: &quot;Test21&quot;,&#xd;
&quot;StepTitle&quot;: &quot;Test21&quot;,&#xd;
&quot;Type&quot;: &quot;SENDANEMAIL&quot;&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${crudPath}sobjects/ActionCadenceStep</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-547797305">&quot;success&quot;:true</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Publish 20 CadenceStep" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;State&quot;: &quot;Active&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${crudPath}sobjects/ActionCadence/${CadenceId20Contact}</stringProp>
                    <stringProp name="HTTPSampler.method">PATCH</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-324329048">&quot;hasErrors&quot;:false</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">2</intProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add Buyer" enabled="true"/>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOQL to find 1 buyer" enabled="false">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${crudPath}query?q=SELECT+Id+From+Contact+where+Id+NOT+IN+(SELECT+TargetId+FROM+ActionCadenceTracker+WHERE+State+!=+&apos;Complete&apos;)+AND+OwnerId+=+&apos;${USERID}&apos;+LIMIT+1</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-324329048">&quot;hasErrors&quot;:false</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="LeadID Extractor" enabled="false">
                        <stringProp name="RegexExtractor.useHeaders">message</stringProp>
                        <stringProp name="RegexExtractor.refname">LeadId20</stringProp>
                        <stringProp name="RegexExtractor.regex">&quot;Id&quot;:&quot;(00Q.{1,15})&quot;</stringProp>
                        <stringProp name="RegexExtractor.template">$1$</stringProp>
                        <stringProp name="RegexExtractor.default">NOCONTACTIDFOUND</stringProp>
                        <stringProp name="RegexExtractor.match_number">-1</stringProp>
                      </RegexExtractor>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">ContactId20</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.records[0].Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Buyer 20 CadenceStep" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value">{ &quot;inputs&quot; :&#xd;
  [&#xd;
  {&#xd;
    &quot;salesCadenceNameOrId&quot; : &quot;${CadenceId20Contact}&quot;,&#xd;
    &quot;targetId&quot; : &quot;${target_id_contact_20}&quot;&#xd;
  }&#xd;
  ]&#xd;
}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${crudPath}actions/standard/assignTargetToSalesCadence</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="1451445821">&quot;isSuccess&quot;:true</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">2</intProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOQL to fetch ActionCadenceTracker20" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${crudPath}query?q=SELECT+Id+From+ActionCadenceTracker+where+TargetId+=+&apos;${target_id_contact_20}&apos;+AND+OwnerId+=+&apos;${USERID}&apos;+LIMIT+1</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">ActionCadenceTracker20Contact</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.records[0].Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                    </hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOQL to fetch ActionCadenceStepTracker20" enabled="true">
                      <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">false</boolProp>
                            <stringProp name="Argument.value"></stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${crudPath}query?q=SELECT+Id+From+ActionCadenceStepTracker+where+TargetId+=+&apos;${target_id_contact_20}&apos;+LIMIT+1</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Default" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Authorization</stringProp>
                            <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                          </elementProp>
                          <elementProp name="" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">application/json</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                        <stringProp name="JSONPostProcessor.referenceNames">ActionCadenceStepTracker20Contact</stringProp>
                        <stringProp name="JSONPostProcessor.jsonPathExprs">$.records[0].Id</stringProp>
                        <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      </JSONPostProcessor>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Contacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="ids" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${allcontacts}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">ids</stringProp>
                      </elementProp>
                      <elementProp name="allOrNone" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">allOrNone</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/composite/sobjects</stringProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Channel Vehicle Controller" enabled="false"/>
            <hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Task Loop" enabled="false">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <intProp name="LoopController.loops">-1</intProp>
              </LoopController>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Task" enabled="true">
                  <stringProp name="TestPlan.comments">Need to select only one input file</stringProp>
                </GenericController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Task" enabled="false">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;CallType&quot;: &quot;Outbound&quot;,&#xd;
	&quot;Description&quot;: &quot;asdnpo&quot;,&#xd;
	&quot;Subject&quot;: &quot;Other: say hello, simple cadence, test lead, test co&quot;,&#xd;
	&quot;Status&quot;: &quot;Completed&quot;,&#xd;
	&quot;TaskSubtype&quot;:&quot;Call&quot;&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/Task/</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">taskids</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Task Controller" enabled="true">
                    <boolProp name="LoopController.continue_forever">true</boolProp>
                    <stringProp name="LoopController.loops">${ITEMS_PER_REQ}</stringProp>
                  </LoopController>
                  <hashTree>
                    <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Task Counter" enabled="true">
                      <stringProp name="CounterConfig.start">1</stringProp>
                      <stringProp name="CounterConfig.end">${ITEMS_PER_REQ}</stringProp>
                      <stringProp name="CounterConfig.incr">1</stringProp>
                      <stringProp name="CounterConfig.name">LOOP_CNT_TASK</stringProp>
                      <stringProp name="CounterConfig.format"></stringProp>
                      <boolProp name="CounterConfig.per_user">true</boolProp>
                      <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                    </CounterConfig>
                    <hashTree/>
                    <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                      <stringProp name="BeanShellSampler.query">String taskcreate = &quot;{&quot; +
	&quot;\&quot;attributes\&quot;:&quot; + &quot;{\&quot;type\&quot;: \&quot;Task\&quot;}&quot; + &quot;,&quot; + 
	&quot;\&quot;CallType\&quot;:\&quot;&quot; + &quot;Outbound&quot; + &quot;\&quot;,&quot; + 
	&quot;\&quot;Description\&quot;:\&quot;&quot; + &quot;asdnpo&quot; + &quot;\&quot;,&quot; + 
	&quot;\&quot;Subject\&quot;:\&quot;&quot; + &quot;randomsubject${__time()}&quot; + &quot;\&quot;,&quot; + 
	&quot;\&quot;Status\&quot;:\&quot;&quot; + &quot;Completed&quot; + &quot;\&quot;,&quot; + 
	&quot;\&quot;TaskSubtype\&quot;:\&quot;&quot; +  &quot;Call&quot; + &quot;\&quot;&quot; + 
&quot;}&quot;;

int loopCnt = Integer.parseInt(vars.get(&quot;LOOP_CNT_TASK&quot;));
int emailsPerReq = Integer.parseInt(vars.get(&quot;ITEMS_PER_REQ&quot;));

String msg = vars.get(&quot;tasks&quot;);
if (loopCnt == 1) {
	// initialize message
	msg = &quot;[&quot; + taskcreate;
} else {
     msg = msg + &quot;,&quot; + taskcreate;
};
if (loopCnt == emailsPerReq) {
     // finalize message
     msg = msg + &quot;]&quot;;
}
vars.put(&quot;tasks&quot;,msg);</stringProp>
                      <stringProp name="BeanShellSampler.filename"></stringProp>
                      <stringProp name="BeanShellSampler.parameters"></stringProp>
                      <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                    </BeanShellSampler>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Generate Tasks" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
&quot;allOrNone&quot;: false,&#xd;
&quot;records&quot;: ${tasks}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/composite/sobjects</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">taskids</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Concat" enabled="true">
                    <stringProp name="BeanShellSampler.query">int emailsPerReq = Integer.parseInt(vars.get(&quot;ITEMS_PER_REQ&quot;));
String alltasks = &quot;&quot;;
for (int i = 1; i &lt; emailsPerReq; i++) {
	String taskvar = &quot;taskids_&quot; + String.valueOf(i);
	alltasks = alltasks + vars.get(taskvar) + &quot;,&quot;;
}
String lasttask = &quot;taskids_&quot; + String.valueOf(emailsPerReq);
alltasks = alltasks + vars.get(lasttask);
vars.put(&quot;alltasks&quot;, alltasks);</stringProp>
                    <stringProp name="BeanShellSampler.filename"></stringProp>
                    <stringProp name="BeanShellSampler.parameters"></stringProp>
                    <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                  </BeanShellSampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Tasks" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="ids" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${alltasks}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">ids</stringProp>
                        </elementProp>
                        <elementProp name="allOrNone" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">false</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">allOrNone</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/composite/sobjects</stringProp>
                    <stringProp name="HTTPSampler.method">DELETE</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="" elementType="Header">
                          <stringProp name="Header.name">Authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="EmailMessage" enabled="true">
                <stringProp name="TestPlan.comments">Need to select only one input file</stringProp>
              </GenericController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Email MEssage 60 contact" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;ActionCadenceStepTrackerId&quot;:&quot;${ActionCadenceStepTracker60Contact}&quot;,&#xd;
	&quot;FromAddress&quot;:&quot;duncan.macleod@salesforce.com&quot;,&#xd;
	&quot;Subject&quot;:&quot;Test&quot;,&#xd;
	&quot;Status&quot;:&quot;3&quot;,&#xd;
	&quot;ToAddress&quot;:&quot;info@salesforce.com&quot;	&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/EmailMessage/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">email_message_id_60_contact</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Email MEssage 60 lead" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;FromAddress&quot;:&quot;duncan.macleod@salesforce.com&quot;,&#xd;
	&quot;Subject&quot;:&quot;Test&quot;,&#xd;
	&quot;Status&quot;:&quot;3&quot;,&#xd;
	&quot;ToAddress&quot;:&quot;info@salesforce.com&quot;	&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/EmailMessage/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">email_message_id_60_lead</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Email MEssage 20 contact" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;ActionCadenceStepTrackerId&quot;:&quot;${ActionCadenceStepTracker20Contact}&quot;,&#xd;
	&quot;FromAddress&quot;:&quot;duncan.macleod@salesforce.com&quot;,&#xd;
	&quot;Subject&quot;:&quot;Test&quot;,&#xd;
	&quot;Status&quot;:&quot;3&quot;,&#xd;
	&quot;ToAddress&quot;:&quot;info@salesforce.com&quot;	&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/EmailMessage/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">email_message_id_20_contact</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Email MEssage 20 lead" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;ActionCadenceStepTrackerId&quot;:&quot;${ActionCadenceStepTracker20Lead}&quot;,&#xd;
	&quot;FromAddress&quot;:&quot;duncan.macleod@salesforce.com&quot;,&#xd;
	&quot;Subject&quot;:&quot;Test&quot;,&#xd;
	&quot;Status&quot;:&quot;3&quot;,&#xd;
	&quot;ToAddress&quot;:&quot;info@salesforce.com&quot;	&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/EmailMessage/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">email_message_id_20_lead</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE Email MEssage 60 contact" enabled="false">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/EmailMessage/${email_message_id_60_contact}</stringProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">email_message_id_60_contact</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Event" enabled="false">
                <stringProp name="TestPlan.comments">Need to select only one input file</stringProp>
              </GenericController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Eventcontact 20" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;ActivityDate&quot;: &quot;2019-09-30&quot;,&#xd;
	&quot;ActivityDateTime&quot;:&quot;2019-09-30T18:18:48.000Z&quot;,&#xd;
	&quot;DurationInMinutes&quot;:&quot;60&quot;,&#xd;
	&quot;Subject&quot;:&quot;Event subject${__time()}&quot;,&#xd;
	&quot;WhoId&quot;:&quot;${target_id_contact_20}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/Event/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">event_id_contact_20</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Eventcontact 60" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;ActivityDate&quot;: &quot;2019-09-30&quot;,&#xd;
	&quot;ActivityDateTime&quot;:&quot;2019-09-30T18:18:48.000Z&quot;,&#xd;
	&quot;DurationInMinutes&quot;:&quot;60&quot;,&#xd;
	&quot;Subject&quot;:&quot;Event subject${__time()}&quot;,&#xd;
	&quot;WhoId&quot;:&quot;${target_id_contact_60}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/Event/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">event_id_contact_60</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Eventlead 20" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;ActivityDate&quot;: &quot;2019-09-30&quot;,&#xd;
	&quot;ActivityDateTime&quot;:&quot;2019-09-30T18:18:48.000Z&quot;,&#xd;
	&quot;DurationInMinutes&quot;:&quot;60&quot;,&#xd;
	&quot;Subject&quot;:&quot;Event subject${__time()}&quot;,&#xd;
	&quot;WhoId&quot;:&quot;${target_id_lead_20}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/Event/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">event_id_lead_20</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Eventlead 60" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;ActivityDate&quot;: &quot;2019-09-30&quot;,&#xd;
	&quot;ActivityDateTime&quot;:&quot;2019-09-30T18:18:48.000Z&quot;,&#xd;
	&quot;DurationInMinutes&quot;:&quot;60&quot;,&#xd;
	&quot;Subject&quot;:&quot;Event subject${__time()}&quot;,&#xd;
	&quot;WhoId&quot;:&quot;${target_id_lead_60}&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/Event/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">event_id_lead_60 </stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ListEmail" enabled="false">
                <stringProp name="TestPlan.comments">Need to select only one input file</stringProp>
              </GenericController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List Email" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;FromAddress&quot;: &quot;j.guo@salesforce.com&quot;,&#xd;
	&quot;Name&quot;: &quot;skdfnasf&quot;,&#xd;
	&quot;Status&quot;:&quot;draft&quot;,&#xd;
	&quot;Subject&quot;: &quot;asdfadfa&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">${PROTOCOL}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">services/data/v${APIVERSION}/sobjects/ListEmail/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${SESSIONID}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">list_email_id</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WriteToCSV" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String orgid = vars.get(&quot;ORGID&quot;);
String username = vars.get(&quot;USERNAME&quot;);
String userid = vars.get(&quot;USERID&quot;);
String leadid20 = &quot;${target_id_lead_20}&quot;; // vars.get();
String leadid60 = &quot;${target_id_lead_60}&quot;; // vars.get();
String contactid20 = &quot;${target_id_contact_20}&quot;; // vars.get();
String contactid60 = &quot;${target_id_contact_60}&quot;; // vars.get();
String actioncadencestep20Lead = &quot;${RootStepId20Lead}&quot;;
String actioncadencestep60Lead = &quot;${RootStepId60Lead}&quot;;
String actioncadencesteptracker20Lead = &quot;${ActionCadenceStepTracker20Lead}&quot;;
String actioncadencesteptracker60Lead = &quot;${ActionCadenceStepTracker60Lead}&quot;;
String actioncadencestep20Contact = &quot;${RootStepId20Contact}&quot;;
String actioncadencestep60Contact = &quot;${RootStepId60Contact}&quot;;
String actioncadencesteptracker20Contact = &quot;${ActionCadenceStepTracker20Contact}&quot;;
String actioncadencesteptracker60Contact = &quot;${ActionCadenceStepTracker60Contact}&quot;;
String templateid = &quot;${template_id}&quot;;
String eventid_contact_20 = &quot;${event_id_contact_20}&quot;;
String eventid_lead_20 = &quot;${event_id_lead_20}&quot;;
String eventid_contact_60 = &quot;${event_id_contact_60}&quot;;
String eventid_lead_60 = &quot;${event_id_lead_60}&quot;;
String taskid=&quot;${task_id}&quot;;
String emailmessageid_60contact=&quot;${email_message_id_60_contact}&quot;;
String emailmessageid_20contact=&quot;${email_message_id_20_contact}&quot;;
String emailmessageid_60lead=&quot;${email_message_id_60_lead}&quot;;
String emailmessageid_20lead=&quot;${email_message_id_20_lead}&quot;;
// Pass true if you want to append to existing file
// If you want to overwrite, then don&apos;t pass the second argument
f = new FileOutputStream(vars.get(&quot;saveFieldsPath&quot;)+&quot;hvsEngagementFields.csv&quot;, true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(orgid + &quot;,&quot; + username + &quot;,&quot; + userid + &quot;,&quot; + leadid20 + &quot;,&quot; + leadid60 + &quot;,&quot; + contactid20 + &quot;,&quot; + contactid60 + &quot;,&quot; + actioncadencestep20Lead + &quot;,&quot; + actioncadencestep60Lead + &quot;,&quot; + actioncadencesteptracker20Lead + &quot;,&quot; + actioncadencesteptracker60Lead + &quot;,&quot; + actioncadencestep20Contact + &quot;,&quot; + actioncadencestep60Contact + &quot;,&quot; + actioncadencesteptracker20Contact + &quot;,&quot; + actioncadencesteptracker60Contact + &quot;,&quot; + taskid + &quot;,&quot; + eventid_lead_20 + &quot;,&quot; + eventid_lead_60 + &quot;,&quot; + eventid_contact_20 + &quot;,&quot; + eventid_contact_60 + &quot;,&quot; + emailmessageid_60contact + &quot;,&quot; + emailmessageid_20contact + &quot;,&quot; + emailmessageid_60lead + &quot;,&quot; + emailmessageid_20lead + &quot;,&quot;+ templateid);
f.close();
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
